name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # === QUALITY ASSURANCE ===
  quality:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧹 Lint code
        run: npm run lint

      - name: 📊 Generate lint report
        run: npm run lint:report
        continue-on-error: true

      - name: 🔍 Type checking
        run: npm run test:typecheck

      - name: 🔒 Security audit
        run: npm run security

      - name: 📈 Dependency analysis
        run: npm run analyze:deps
        continue-on-error: true

      - name: 📤 Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            dependency-graph.json
          retention-days: 30

  # === TESTING ===
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [18, 20]
        test-type: [unit, integration, accessibility]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}
        env:
          CI: true

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}-${{ matrix.test-type }}
          path: |
            test-results/
            coverage/
          retention-days: 30

  # === COVERAGE ===
  coverage:
    name: 📊 Test Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📊 Generate coverage report
        run: npm run test:coverage
        env:
          CI: true

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📊 Coverage comment
        uses: 5monkeys/cobertura-action@master
        if: github.event_name == 'pull_request'
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 80

  # === PERFORMANCE ===
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build

      - name: ⚡ Run performance tests
        run: npm run test:performance
        env:
          CI: true

      - name: 📊 Run benchmarks
        run: npm run test:benchmark
        continue-on-error: true

      - name: 📈 Bundle analysis
        run: npm run analyze:size

      - name: 📤 Upload performance reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-reports
          path: |
            benchmark-results/
            dist/stats.html
          retention-days: 30

  # === BUILD ===
  build:
    name: 🏗️ Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, coverage]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📋 Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build for production
        run: npm run build:prod
        env:
          NODE_ENV: production

      - name: 📊 Generate bundle analysis
        run: npm run build:analyze
        env:
          ANALYZE: true

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
          retention-days: 30

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist

  # === LIGHTHOUSE ===
  lighthouse:
    name: 🔍 Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build application
        run: npm run build

      - name: 🚀 Start preview server
        run: npm run preview &
        env:
          CI: true

      - name: ⏳ Wait for server
        run: npx wait-on http://localhost:4173 --timeout 30000

      - name: 🔍 Run Lighthouse audit
        run: npm run perf:lighthouse

      - name: 📤 Upload Lighthouse report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: lighthouse-report.json
          retention-days: 30

  # === NOTIFICATION ===
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [quality, test, coverage, performance, build]
    if: always()
    
    steps:
      - name: 📊 Collect job results
        id: results
        run: |
          echo "quality=${{ needs.quality.result }}" >> $GITHUB_OUTPUT
          echo "test=${{ needs.test.result }}" >> $GITHUB_OUTPUT
          echo "coverage=${{ needs.coverage.result }}" >> $GITHUB_OUTPUT
          echo "performance=${{ needs.performance.result }}" >> $GITHUB_OUTPUT
          echo "build=${{ needs.build.result }}" >> $GITHUB_OUTPUT

      - name: 📢 Success notification
        if: |
          steps.results.outputs.quality == 'success' &&
          steps.results.outputs.test == 'success' &&
          steps.results.outputs.coverage == 'success'
        run: |
          echo "✅ All quality checks passed!"
          echo "🚀 TreeBox is ready for deployment"

      - name: 📢 Failure notification
        if: |
          steps.results.outputs.quality == 'failure' ||
          steps.results.outputs.test == 'failure' ||
          steps.results.outputs.coverage == 'failure'
        run: |
          echo "❌ Quality checks failed!"
          echo "🔧 Please review the failed jobs and fix issues"
          exit 1 